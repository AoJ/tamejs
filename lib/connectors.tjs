// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

//=======================================================================

function _timeout (cb, t, res, tmp) {

    var rv = new tame.Rendezvous ();
    var arr;
    tmp[0] = rv.id (true).defer (...arr);
    setTimeout (rv.id (false).defer (), t);
    await { rv.wait (defer (var which)); }
    if (res) { res[0] = which; }
    cb.apply (null, arr);
};

function timeout (cb, t, res) {
    var tmp = [];
    _timeout (cb, t, res, tmp);
    return tmp[0];
};

//=======================================================================

function Pipeliner (window, delay) {
    
    this._window = window || 1;
    this._delay = delay || 0;
    this._queue = [];
    this._n_out = 0;
    this._cb = null;

    //-----------------------------------------

    this.waitInQueue = function (cb) {

        while (this._n_out > this._window) {
            await { this._cb = defer (); }
        }
        this._n_out++;
        if (this._delay) {
            await setTimeout (defer (), this._delay);
        }
        cb ();

    };

    //-----------------------------------------

    this._defer = function (out, deferArgs) {

        await { 
            var voidCb = defer ();
            out[0] = function () {
                if (deferArgs.assign_fn) {
                    deferArgs.assign_fn.apply (null, arguments);
                }
                voidCb();
            };
        }

        this._n_out --;

        if (this._cb) {
            var tmp = this._cb;
            this._cb = null;
            tmp();
        }
    };

    //-----------------------------------------

    // Use quotes syntax so this "defer" isn't rewritten by the tamejs
    // compiler.
    this["defer"] = function (deferArgs) {
        var tmp = [];
        this._defer (tmp, deferArgs);
        return tmp[0];
    };

    //-----------------------------------------

    this.flush = function (cb) {
        while (this._n_out) {
            await { this._cb = defer (); }
        }
        cb();
    };

    //-----------------------------------------

    // This is a hack to work with the semantic desugaring of
    // 'defers' output by the tamejs compiler.
    this.__tame_defers = this;

    //-----------------------------------------
};

//=======================================================================

exports.timeout = timeout;
exports.Pipeliner = Pipeliner;
