#!/usr/bin/env node
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

var fs = require ('fs');

function Case (file) {
    this._file = file;

    this.run = function () {
	var x = require ("./" + self._file);
	for (var c in x) {
	    twait { x[c].run (mkevent ());}
	    x.check ();
	}
    };

    return this;
};

function TamedCase (prfx, infile, outfile) {
    var that = new Case (prfx + outfile);
    that._infile = prfx + infile;

    that.compile = function (ev) {
        var fs = require ('fs');
        var Engine = require ('../lib/engine').Engine;
        var engine = new Engine (self._infile);
	console.log ("f: "+ self._infile);
        twait { engine.readInput (mkevent ()); }
	engine.parse ();
	var outdat = engine.compile ().formatOutput ();
        var res = [];
        twait { fs.writeFile (self._file, outdat, mkevent (res)); }
	if (res[0]) throw res[0];
        ev();
    };

    return that ;
};

function JsCase (file) {
    var that = new Case (prfx + file);
    that.compile = function (ev) { ev(); };
    return that;
};

function read_cases (ev) {
    var tests = [];
    var res = [];
    var prfx = "test/cases/";
    twait { fs.readdir ('test/cases/', mkevent (res)); }
    var err = res[0];
    var files = res[1];
    if (err) throw err;
    var rxx = new RegExp ('^(.*)\\.(t)?js$');
    for (f in files) {
        var file = files[f];
	var m =  file.match(rxx);
	if (m) {
	    if (m[2]) {
		tests.push (new TamedCase (prfx, file, m[1] + ".js"));
	    } else {
		tests.push (new JsCase (prfx + file));
	    }
	}
    }
    ev(tests);
};

function do_cases (ev) {
    var res = [];
    twait { read_cases (mkevent (res)); }
    var cases = res[0];
    for (var i in cases) {
	twait { cases[i].compile (mkevent ()); }
	twait { cases[i].run (mkevent()); }
    }
    ev ();
};

twait { do_cases (mkevent ()); }


